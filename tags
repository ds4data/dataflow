!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DataFlow	dataflow/dataflow.py	/^class DataFlow:$/;"	c
DataSource	dataflow/dataflow.py	/^class DataSource:$/;"	c
__enter__	dataflow/dataflow.py	/^    def __enter__(self):$/;"	m	class:DataFlow	file:
__exit__	dataflow/dataflow.py	/^    def __exit__(self, type, value, traceback):$/;"	m	class:DataFlow	file:
__init__	dataflow/dataflow.py	/^    def __init__($/;"	m	class:DataSource
__init__	dataflow/dataflow.py	/^    def __init__(self, input_file):$/;"	m	class:DataFlow
columns	app.py	/^            columns = list(ds.data.columns)$/;"	v
connection	app.py	/^                    connection = df.sqlite3.connect(database)$/;"	v
database	app.py	/^                database = database + db_extension$/;"	v
database	app.py	/^                database = st.selectbox($/;"	v
database	app.py	/^                database = st.text_input("Nova Database ('*.db')")$/;"	v
date_column	app.py	/^            date_column = st.selectbox($/;"	v
date_format	app.py	/^                date_format = st.text_input(label="Formato da data", value="%Y-%m-%d",)$/;"	v
db_extension	app.py	/^            db_extension = ".db"$/;"	v
df	app.py	/^from dataflow import dataflow as df$/;"	i
drop_columns	app.py	/^            drop_columns = st.multiselect(label="Ignorar Colunas", options=columns)$/;"	v
ds	app.py	/^            ds = get_data(path, sep, encoding)$/;"	v
encoding	app.py	/^    encoding = st.selectbox($/;"	v
format_func	app.py	/^                format_func=lambda x: {$/;"	v
get_data	app.py	/^def get_data(path, sep, encoding):$/;"	f
get_data	dataflow/dataflow.py	/^    def get_data(self) -> None:$/;"	m	class:DataSource
glob	app.py	/^import glob$/;"	i
if_exists	app.py	/^            if_exists = st.selectbox($/;"	v
index	app.py	/^                index=1,$/;"	v
label	app.py	/^                label="Nome da tabela no banco de dados (case-insensitive)"$/;"	v
label	app.py	/^            label = st.text_input($/;"	v
new_database	app.py	/^            new_database = st.checkbox("Criar nova base de dados")$/;"	v
options	app.py	/^                options=["fail", "replace", "append"],$/;"	v
path	app.py	/^        path = st.file_uploader($/;"	v
path	app.py	/^        path = st.text_input("Link")$/;"	v
pd	dataflow/dataflow.py	/^import pandas as pd$/;"	i
project_opened	.vscode/.ropeproject/config.py	/^def project_opened(project):$/;"	f
run	dataflow/dataflow.py	/^    def run(self):$/;"	m	class:DataFlow
sep	app.py	/^        sep = st.text_input(label="Delimitador", value=",")$/;"	v
set_prefs	.vscode/.ropeproject/config.py	/^def set_prefs(prefs):$/;"	f
sqlite3	dataflow/dataflow.py	/^import sqlite3$/;"	i
st	app.py	/^import streamlit as st$/;"	i
store_data	dataflow/dataflow.py	/^    def store_data(self, db_connection, table_name=None, if_exists="replace") -> None:$/;"	m	class:DataSource
transform_data	dataflow/dataflow.py	/^    def transform_data(self) -> None:$/;"	m	class:DataSource
yaml	dataflow/dataflow.py	/^import yaml$/;"	i
